version: '3'
services:
  # -------------------------------- * MySql 服务 * --------------------------------
  mysql:  # MySql 服务
    environment:  # 环境变量
      MIRROR_SOURCE: ${MIRROR_SOURCE_TENCENT} # 镜像来源
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD} # mysql root 密码
    image: jirry/mysql:5.7  # 镜像名
    container_name: jirry-mysql # 容器名
    build:  # 构建
      context: .  # 构建目录，.：当前目录
      dockerfile: ${MYSQL_DIR}/v5.7/Dockerfile  # Dockerfile 构建文件
    ports:  # 端口
      - "3306:3306" # 对外端口
    volumes:  # 挂载卷
      - ${MYSQL_DIR}/data:/var/lib/mysql:rw # mysql 数据；rw：读写，同步宿主机
      - ${MYSQL_DIR}/etc:/etc/mysql:ro  # mysql 配置；ro：只读，不同步宿主机
      - ${MYSQL_DIR}/log:/var/log/mysql:rw  # mysql 日志；rw：读写，同步宿主机
    restart: always # 重启；永久（开机随Docker自启）
    command: "--character-set-server=utf8"  # 命令；设置编码

  # -------------------------------- * Redis 服务 * --------------------------------
  redis:
    environment:  # 环境变量
      MIRROR_SOURCE: ${MIRROR_SOURCE_TENCENT} # 镜像来源
    image: jirry/redis:5.0  # 镜像名
    container_name: jirry-redis # 容器名
    build:  # 构建
      context: .  # 构建目录，.：当前目录
      dockerfile: ${REDIS_DIR}/v5.0/Dockerfile  # Dockerfile 构建文件
    ports:
      - "6379:6379"
    volumes:
      - ${REDIS_DIR}/data:/data:rw # Redis 数据
      - ${REDIS_DIR}/etc:/etc/redis:ro # Redis 配置
      - ${REDIS_DIR}/log:/var/log/redis:rw # Redis 日志
    restart: always # 重启；永久（开机随Docker自启）
    command:
      redis-server /etc/redis/6379.conf  # 启动Redis服务
  # -------------------------------- * PHP 服务 * --------------------------------
  php:
    environment:  # 环境变量
      MIRROR_SOURCE: ${MIRROR_SOURCE_ALIYUN}  # 镜像来源
    image: jirry/php:7.3-fpm
    container_name: jirry-php-7.3
    build:
      context: .
      dockerfile: ${PHP_DIR}/v7.3/Dockerfile
      args:
        INSTALL_SWOOLE: "true"
    depends_on: # 依赖服务
      - mysql
    ports:
      - "9000:9000"
    volumes:
      - ${WWW_PATH}:/var/www/html:rw
      - ${PHP_DIR}/etc:/usr/local/etc:ro
    restart: always
    command: php-fpm
  # -------------------------------- * Openresty 服务 * --------------------------------
  openresty:
    environment:
      MIRROR_SOURCE: ${MIRROR_SOURCE_TENCENT}  # 镜像来源
    image: jirry/openresty:1.13
    container_name: jirry-openresty
    build:
      context: .
      dockerfile: ${OPENRESTY_DIR}/v1.13/Dockerfile
    depends_on:
      - php
    ports:
      - "80:80"
      - "801:801"
      - "8443:443"
      - "60000:60000"
      - "60001:60001"
    volumes:
      - ${WWW_PATH}:/usr/local/openresty/nginx/html:rw
      - ${OPENRESTY_DIR}/etc/conf.d:/etc/nginx/conf.d
      - ${OPENRESTY_DIR}/etc/nginx.conf:/usr/local/openresty/nginx/conf/nginx.conf:ro
      - /var/www/openresty:/var/www/openresty
    restart: always
    command: openresty -g 'daemon off;'
  # -------------------------------- * Postgores 服务 * --------------------------------
  postgres:
    environment:
      MIRROR_SOURCE: ${MIRROR_SOURCE_ALIYUN}  # 镜像来源
      POSTGRES_USER: ${POSTGRES_USER_KONG} # 用户名
      POSTGRES_DB: ${POSTGRES_DB_KONG} # 密码
    image: jirry/postgres:9.6
    container_name: jirry-postgres
    build:
      context: .
      dockerfile: ${POSTGRES_DIR}/v9.6/Dockerfile
    ports:
      - "5432:5432"
    volumes:
      - ${POSTGRES_DIR}/data:/var/lib/postgresql/data:rw  # 数据目录
    restart: always
  # -------------------------------- * Kong 服务 * --------------------------------
  # kong构建完成后，运行kong数据迁移：docker-compose run --rm kong kong migrations up
  kong:
    environment:
      MIRROR_SOURCE: ${MIRROR_SOURCE_ALIYUN}  # 镜像来源
      KONG_DATABASE: postgres
      KONG_PG_HOST: jirry-postgres
      KONG_CASSANDRA_CONTACT_POINTS: jirry-postgres
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001, 0.0.0.0:8444 ssl
    image: jirry/kong:0.13
    container_name: jirry-kong
    build:
      context: .
      dockerfile: ${KONG_DIR}/v0.13/Dockerfile
    depends_on:
      - postgres
      - openresty
    ports:
      - "8000:8000"
      - "443:8443"
      - "8100:8001"
      - "8444:8444"
    volumes:
      - ${KONG_DIR}/etc:/etc/kong:ro
    restart: always
  # -------------------------------- * Kong Web 服务 * --------------------------------
#  kong-dashboard:
#    environment:
#      KONG_URL: http://192.168.1.10:8100
#    image: jirry/kong-dashboard
#    container_name: jirry-kong-dashboard
#    build:
#      context: .
#      dockerfile: ${KONG_DASHBOARD_DIR}/Dockerfile
#    depends_on:
#      - kong
#    ports:
#      - "8080:8080"
#    restart: always
#    command: "bin/kong-dashboard.js start --kong-url=http://jirry-kong:8100"







